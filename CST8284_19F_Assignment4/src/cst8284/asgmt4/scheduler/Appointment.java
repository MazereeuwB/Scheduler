/*
 *  Course Name:CST8284_310
 *  Student Name: Ben Mazereeuw
 *  Class Name:Object-Oriented Programming
 *  Date: November 28th, 2019
 */

package cst8284.asgmt4.scheduler;


import java.util.Calendar;

import java.io.Serializable;
/**
 * Handles appointment information, first and last names, phone number of client, as well as appointment date, and activity. 
 * It then splits up necessary data, and then stores and retrieves it with appropriate setters and getters
 * @author Ben Mazereeuw
 * @version 3rd iteration of Appointment class
 *
 */
public class Appointment implements Serializable{
	/**
	 * a Calendar object, storing the date of an appointment in the schedule
	 */
	private Calendar aptDate;
	/**
	 * Strings holding the first name of a client, entered by user, as well as the last name of the client, as entered by user.
	 */
	private String firstName, lastName;
	/**
	 * An object of the Telephone class, holding the client's phone number, as entered by the client and handled by the Telephone class.
	 */
	private TelephoneNumber phone;
	/**
	 * An object of the Activity class, holding the activity type and description of the given appointment
	 */
	private Activity activity;
	/**
	 * serialVersionUID is a marker interface that helps identify which objects can be safely shipped
	 */
	public static final long serialVersionUID = 1L;
	/**
	 * This constructor takes the client's full name, and splits it into first and last names.  It then passes these Strings, as well as the Telephone object, Calendar object, and Activity object
	 * associated with the appointment being generated by the user to the 5-arg constructor.
	 * @param cal  - an object of Calendar
	 * @param fullName - a String, as entered by the user, of the client's first and last name, together as a single string
	 * @param phone - an object of Telephone
	 * @param act - an object of Activity
	 */
	public Appointment(Calendar cal, String fullName, TelephoneNumber phone, Activity act) {
		this(cal, fullName.trim().split(" ")[0], fullName.trim().split(" ")[1], phone, act);
	}
	/**
	 * This constructor takes the client's first and last names, as well as the Calendar object, Telephone object, and Activity object
	 * associated with the appointment being set by the user.  These values are then passed to their respective setters.
	 * @param cal - Calendar object
	 * @param firstName - first name of client
	 * @param lastName - last name of client
	 * @param phone - Telephone object
	 * @param act - Activity object
	 */
	public Appointment(Calendar cal, String firstName, String lastName, TelephoneNumber phone, Activity act) {
		
		
		setFirstName(firstName.trim()); 
		setLastName(lastName.trim());
		setCalendar(cal); 
		setPhone(phone);
		setActivity(act);
		
	}
	/**
	 * getter for aptDate Calendar object
	 * @return aptDate object
	 */
	public Calendar getCalendar() {return aptDate;}
	/**
	 * setter for aptDate Calendar object
	 * @param aptDate object
	 */
	public void setCalendar(Calendar aptDate) {this.aptDate = aptDate;}
	/**
	 * getter for client firstName String
	 * @return firstName 
	 */
	public String getFirstName() {return firstName; }
	/**
	 * setter for client firstName
	 * @param firstName String
	 */
	public void setFirstName(String firstName) { this.firstName = firstName;}
	/**
	 * getter for client lastName String
	 * @return lastName String
	 */
	public String getLastName() {return lastName;}
	/**
	 * setter for lastName String
	 * @param lastName String
	 */
	public void setLastName(String lastName) {this.lastName = lastName;	}
	/**
	 * getter for phone object
	 * @return phone object
	 */
	public TelephoneNumber getPhone() {return phone;}
	/**
	 * setter for phone object
	 * @param phone object
	 */
	public void setPhone(TelephoneNumber phone) {this.phone = phone;}
	/**
	 * getter for activity object
	 * @return activity object
	 */
	public Activity getActivity() {return activity;}
	/**
	 * setter for activity
	 * @param activity object
	 */
	public void setActivity(Activity activity) {this.activity = activity;}
	
	/**
	 * Appointment's toString method, which incorporates and concatenates Calendar's getTime's toString method, first and last name of the client,
	 * Telephone's toString method and Activity's toString method
	 * @return a concatenated string of client and schedule information, the time of the appointment, first and last name, phone number, and activity of client
	 */
	public String toString() {
		return getCalendar().getTime().toString() + "\n" +
			   getFirstName() + " " + getLastName() + "\n" + 
			   getPhone().toString() + "\n" +
			   getActivity().toString();
	}

}
